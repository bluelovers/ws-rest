"use strict";
/**
 * Created by user on 2019/6/8.
 */
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
const config_1 = __importDefault(require("./config"));
const reflect_metadata_util_1 = require("reflect-metadata-util");
const cloneDeep_1 = __importDefault(require("lodash/cloneDeep"));
exports.SymParamMap = Symbol('ParamMap');
function BodyParams(value) {
    return config_1.default('params', value, true);
}
exports.BodyParams = BodyParams;
function BodyData(value) {
    return config_1.default('data', value, true);
}
exports.BodyData = BodyData;
function _paramBuilder(paramName) {
    return function (key, defaultValue) {
        return function (target, propertyKey, parameterIndex) {
            const paramObj = {
                key,
                parameterIndex,
                defaultValue,
            };
            const arr = reflect_metadata_util_1.getMemberMetadata(paramName, target, propertyKey) || [];
            arr.push(paramObj);
            reflect_metadata_util_1.setMemberMetadata(paramName, arr, target, propertyKey);
        };
    };
}
function ParamBody(defaultValue) {
    return function (target, propertyKey, parameterIndex) {
        const paramObj = {
            key: "Body" /* PARAM_BODY */,
            parameterIndex,
            defaultValue,
        };
        reflect_metadata_util_1.setMemberMetadata("Body" /* PARAM_BODY */, paramObj, target, propertyKey);
    };
}
exports.ParamBody = ParamBody;
exports.ParamPath = _paramBuilder("Path" /* PARAM_PATH */);
exports.ParamQuery = _paramBuilder("Query" /* PARAM_QUERY */);
exports.ParamData = _paramBuilder("Data" /* PARAM_DATA */);
exports.ParamHeader = _paramBuilder("Header" /* PARAM_HEADER */);
function getParamMetadata(target, propertyKey) {
    let maps = reflect_metadata_util_1.getMemberMetadata(exports.SymParamMap, target, propertyKey);
    return {
        ["Path" /* PARAM_PATH */]: reflect_metadata_util_1.getMemberMetadata("Path" /* PARAM_PATH */, target, propertyKey),
        ["Query" /* PARAM_QUERY */]: reflect_metadata_util_1.getMemberMetadata("Query" /* PARAM_QUERY */, target, propertyKey),
        ["Data" /* PARAM_DATA */]: reflect_metadata_util_1.getMemberMetadata("Data" /* PARAM_DATA */, target, propertyKey),
        ["Header" /* PARAM_HEADER */]: reflect_metadata_util_1.getMemberMetadata("Header" /* PARAM_HEADER */, target, propertyKey),
        ["Body" /* PARAM_BODY */]: reflect_metadata_util_1.getMemberMetadata("Body" /* PARAM_BODY */, target, propertyKey),
        ...maps,
    };
}
exports.getParamMetadata = getParamMetadata;
function HandleParamMetadata(fn) {
    return function (target, propertyKey, descriptor) {
        const oldMethod = descriptor.value;
        descriptor.value = function (...argv) {
            let ret;
            let paramMetadata;
            paramMetadata = _habdleParamInfo({
                //target,
                //propertyKey,
                //thisArgv: this,
                argv,
                paramMetadata: getParamMetadata(this, propertyKey),
            });
            //console.dir(argv);
            argv = _ParamInfoToArgv(paramMetadata, argv);
            //console.dir(argv);
            ret = fn({
                target,
                propertyKey,
                thisArgv: this,
                argv,
                paramMetadata,
            });
            if (ret.paramMetadata == null) {
                ret.paramMetadata = paramMetadata;
            }
            if (ret.argv != null) {
                argv = ret.argv;
            }
            else {
                ret.argv = argv;
            }
            return oldMethod.apply(this, argv);
        };
    };
}
exports.HandleParamMetadata = HandleParamMetadata;
function _habdleParamInfo(info) {
    const { argv } = info;
    const data = cloneDeep_1.default(info.paramMetadata);
    return Object.keys(data)
        .reduce((ret, key) => {
        if (data[key] == null || (Array.isArray(data[key]) && !data[key].length)) {
            return ret;
        }
        if (key === "Body" /* PARAM_BODY */) {
            const row = data[key];
            const value = argv[row.parameterIndex];
            ret[key] = {
                ...data[key],
                value,
            };
        }
        else {
            const arr = data[key];
            ret[key] = arr.map((row) => {
                const value = argv[row.parameterIndex];
                return {
                    ...row,
                    value,
                };
            });
        }
        return ret;
    }, {});
}
exports._habdleParamInfo = _habdleParamInfo;
function _ParamInfoToArgv(data, argv) {
    return Object.keys(data)
        .reduce(function (argv, key) {
        let arr;
        if (key === "Body" /* PARAM_BODY */) {
            arr = [data[key]];
        }
        else {
            arr = data[key];
        }
        arr.forEach((row) => {
            argv[row.parameterIndex] = row.value == null ? row.defaultValue : row.value;
        });
        return argv;
    }, argv.slice());
}
exports._ParamInfoToArgv = _ParamInfoToArgv;
function _paramBuilderMap(paramName) {
    return function (defaultValue) {
        return function (target, propertyKey, parameterIndex) {
            const paramObj = {
                key: null,
                parameterIndex,
                defaultValue,
            };
            const data = reflect_metadata_util_1.getMemberMetadata(exports.SymParamMap, target, propertyKey) || {};
            data[paramName] = data[paramName] || [];
            data[paramName].push(paramObj);
            reflect_metadata_util_1.setMemberMetadata(exports.SymParamMap, data, target, propertyKey);
        };
    };
}
exports.ParamMapPath = _paramBuilderMap("Map_Path" /* PARAM_MAP_PATH */);
exports.ParamMapQuery = _paramBuilderMap("Map_Query" /* PARAM_MAP_QUERY */);
exports.ParamMapData = _paramBuilderMap("Map_Data" /* PARAM_MAP_DATA */);
exports.ParamMapHeader = _paramBuilderMap("Map_Header" /* PARAM_MAP_HEADER */);
exports.ParamMapAuto = _paramBuilderMap("Map_Auto" /* PARAM_MAP_AUTO */);
exports.ParamMapBody = _paramBuilderMap("Map_Body" /* PARAM_MAP_BODY */);
//# sourceMappingURL=data:application/json;base64,
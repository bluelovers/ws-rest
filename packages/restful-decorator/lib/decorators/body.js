"use strict";
/**
 * Created by user on 2019/6/8.
 */
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
const config_1 = __importDefault(require("./config"));
const reflect_metadata_util_1 = require("reflect-metadata-util");
const cloneDeep_1 = __importDefault(require("lodash/cloneDeep"));
function BodyParams(value) {
    return config_1.default('params', value, true);
}
exports.BodyParams = BodyParams;
function BodyData(value) {
    return config_1.default('data', value, true);
}
exports.BodyData = BodyData;
function _paramBuilder(paramName) {
    return function (key, defaultValue) {
        return function (target, propertyKey, parameterIndex) {
            const paramObj = {
                key,
                parameterIndex,
                defaultValue,
            };
            const arr = reflect_metadata_util_1.getMemberMetadata(paramName, target, propertyKey) || [];
            arr.push(paramObj);
            reflect_metadata_util_1.setMemberMetadata(paramName, arr, target, propertyKey);
        };
    };
}
function ParamBody(defaultValue) {
    return function (target, propertyKey, parameterIndex) {
        const paramObj = {
            key: "Body" /* PARAM_BODY */,
            parameterIndex,
            defaultValue,
        };
        reflect_metadata_util_1.setMemberMetadata("Body" /* PARAM_BODY */, paramObj, target, propertyKey);
    };
}
exports.ParamBody = ParamBody;
exports.ParamPath = _paramBuilder("Path" /* PARAM_PATH */);
exports.ParamQuery = _paramBuilder("Query" /* PARAM_QUERY */);
exports.ParamData = _paramBuilder("Data" /* PARAM_DATA */);
exports.ParamHeader = _paramBuilder("Header" /* PARAM_HEADER */);
function getParamMetadata(target, propertyKey) {
    return {
        ["Path" /* PARAM_PATH */]: reflect_metadata_util_1.getMemberMetadata("Path" /* PARAM_PATH */, target, propertyKey),
        ["Query" /* PARAM_QUERY */]: reflect_metadata_util_1.getMemberMetadata("Query" /* PARAM_QUERY */, target, propertyKey),
        ["Data" /* PARAM_DATA */]: reflect_metadata_util_1.getMemberMetadata("Data" /* PARAM_DATA */, target, propertyKey),
        ["Header" /* PARAM_HEADER */]: reflect_metadata_util_1.getMemberMetadata("Header" /* PARAM_HEADER */, target, propertyKey),
        ["Body" /* PARAM_BODY */]: reflect_metadata_util_1.getMemberMetadata("Body" /* PARAM_BODY */, target, propertyKey),
    };
}
exports.getParamMetadata = getParamMetadata;
function HandleParamMetadata(fn) {
    return function (target, propertyKey, descriptor) {
        const oldMethod = descriptor.value;
        descriptor.value = function (...argv) {
            let ret;
            let paramMetadata;
            paramMetadata = _habdleParamInfo({
                //target,
                //propertyKey,
                //thisArgv: this,
                argv,
                paramMetadata: getParamMetadata(this, propertyKey),
            });
            //console.dir(argv);
            argv = _ParamInfoToArgv(paramMetadata, argv);
            //console.dir(argv);
            ret = fn({
                target,
                propertyKey,
                thisArgv: this,
                argv,
                paramMetadata,
            });
            if (ret.paramMetadata == null) {
                ret.paramMetadata = paramMetadata;
            }
            if (ret.argv != null) {
                argv = ret.argv;
            }
            else {
                ret.argv = argv;
            }
            return oldMethod.apply(this, argv);
        };
    };
}
exports.HandleParamMetadata = HandleParamMetadata;
function _habdleParamInfo(info) {
    const { argv } = info;
    const data = cloneDeep_1.default(info.paramMetadata);
    return Object.keys(data)
        .reduce((ret, key) => {
        if (data[key] == null || (Array.isArray(data[key]) && !data[key].length)) {
            return ret;
        }
        if (key === "Body" /* PARAM_BODY */) {
            const row = data[key];
            const value = argv[row.parameterIndex];
            ret[key] = {
                ...data[key],
                value,
            };
        }
        else {
            const arr = data[key];
            ret[key] = arr.map((row) => {
                const value = argv[row.parameterIndex];
                return {
                    ...row,
                    value,
                };
            });
        }
        return ret;
    }, {});
}
exports._habdleParamInfo = _habdleParamInfo;
function _ParamInfoToArgv(data, argv) {
    return Object.keys(data)
        .reduce(function (argv, key) {
        let arr;
        if (key === "Body" /* PARAM_BODY */) {
            arr = [data[key]];
        }
        else {
            arr = data[key];
        }
        arr.forEach((row) => {
            argv[row.parameterIndex] = row.value == null ? row.defaultValue : row.value;
        });
        return argv;
    }, argv.slice());
}
exports._ParamInfoToArgv = _ParamInfoToArgv;
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiYm9keS5qcyIsInNvdXJjZVJvb3QiOiIiLCJzb3VyY2VzIjpbImJvZHkudHMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IjtBQUFBOztHQUVHOzs7OztBQUVILHNEQUFxQztBQUVyQyxpRUFBZ0g7QUFDaEgsaUVBQXlDO0FBVXpDLFNBQWdCLFVBQVUsQ0FBVSxLQUFRO0lBRTNDLE9BQU8sZ0JBQWEsQ0FBQyxRQUFRLEVBQUUsS0FBSyxFQUFFLElBQUksQ0FBQyxDQUFDO0FBQzdDLENBQUM7QUFIRCxnQ0FHQztBQUVELFNBQWdCLFFBQVEsQ0FBVSxLQUFRO0lBRXpDLE9BQU8sZ0JBQWEsQ0FBQyxNQUFNLEVBQUUsS0FBSyxFQUFFLElBQUksQ0FBQyxDQUFDO0FBQzNDLENBQUM7QUFIRCw0QkFHQztBQVVELFNBQVMsYUFBYSxDQUFDLFNBQW1GO0lBRXpHLE9BQU8sVUFBOEMsR0FBTSxFQUFFLFlBQWdCO1FBRTVFLE9BQU8sVUFBVSxNQUFjLEVBQUUsV0FBeUIsRUFBRSxjQUFzQjtZQUVqRixNQUFNLFFBQVEsR0FBcUI7Z0JBQ2xDLEdBQUc7Z0JBQ0gsY0FBYztnQkFDZCxZQUFZO2FBQ1osQ0FBQztZQUVGLE1BQU0sR0FBRyxHQUFpQix5Q0FBaUIsQ0FBQyxTQUFTLEVBQUUsTUFBTSxFQUFFLFdBQVcsQ0FBQyxJQUFJLEVBQUUsQ0FBQztZQUVsRixHQUFHLENBQUMsSUFBSSxDQUFDLFFBQVEsQ0FBQyxDQUFDO1lBRW5CLHlDQUFpQixDQUFDLFNBQVMsRUFBRSxHQUFHLEVBQUUsTUFBTSxFQUFFLFdBQVcsQ0FBQyxDQUFDO1FBQ3hELENBQUMsQ0FBQztJQUNILENBQUMsQ0FBQztBQUNILENBQUM7QUFFRCxTQUFnQixTQUFTLENBQVUsWUFBZ0I7SUFFbEQsT0FBTyxVQUFVLE1BQWMsRUFBRSxXQUF5QixFQUFFLGNBQXNCO1FBRWpGLE1BQU0sUUFBUSxHQUFxRDtZQUNsRSxHQUFHLHlCQUFtQztZQUN0QyxjQUFjO1lBQ2QsWUFBWTtTQUNaLENBQUM7UUFFRix5Q0FBaUIs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QUMsY0FBYyxDQUFDLEdBQUcsR0FBRyxDQUFDLEtBQUssSUFBSSxJQUFJLENBQUMsQ0FBQyxDQUFDLEdBQUcsQ0FBQyxZQUFZLENBQUMsQ0FBQyxDQUFDLEdBQUcsQ0FBQyxLQUFLLENBQUM7UUFDN0UsQ0FBQyxDQUFDLENBQUM7UUFFSCxPQUFPLElBQUksQ0FBQztJQUNiLENBQUMsRUFBRSxJQUFJLENBQUMsS0FBSyxFQUFFLENBQUMsQ0FDZjtBQUNILENBQUM7QUF6QkQsNENBeUJDIiwic291cmNlc0NvbnRlbnQiOlsiLyoqXG4gKiBDcmVhdGVkIGJ5IHVzZXIgb24gMjAxOS82LzguXG4gKi9cblxuaW1wb3J0IFJlcXVlc3RDb25maWcgZnJvbSAnLi9jb25maWcnO1xuaW1wb3J0IHsgRW51bVJlc3RDbGllbnRNZXRhZGF0YSB9IGZyb20gJy4vaHR0cCc7XG5pbXBvcnQgeyBnZXRNZW1iZXJNZXRhZGF0YSwgSVBhcmFtZXRlckRlY29yYXRvciwgSVByb3BlcnR5S2V5LCBzZXRNZW1iZXJNZXRhZGF0YSB9IGZyb20gJ3JlZmxlY3QtbWV0YWRhdGEtdXRpbCc7XG5pbXBvcnQgY2xvbmVEZWVwIGZyb20gJ2xvZGFzaC9jbG9uZURlZXAnO1xuXG5leHBvcnQgaW50ZXJmYWNlIElQYXJhbWV0ZXI8SyA9IHN0cmluZywgViA9IGFueT5cbntcblx0a2V5OiBLO1xuXHRwYXJhbWV0ZXJJbmRleDogbnVtYmVyO1xuXHRkZWZhdWx0VmFsdWU/OiBWXG5cdHZhbHVlPzogViB8IHVua25vd25cbn1cblxuZXhwb3J0IGZ1bmN0aW9uIEJvZHlQYXJhbXM8VCA9IGFueT4odmFsdWU6IFQpXG57XG5cdHJldHVybiBSZXF1ZXN0Q29uZmlnKCdwYXJhbXMnLCB2YWx1ZSwgdHJ1ZSk7XG59XG5cbmV4cG9ydCBmdW5jdGlvbiBCb2R5RGF0YTxUID0gYW55Pih2YWx1ZTogVClcbntcblx0cmV0dXJuIFJlcXVlc3RDb25maWcoJ2RhdGEnLCB2YWx1ZSwgdHJ1ZSk7XG59XG5cbmV4cG9ydCB0eXBlIElFbnVtUmVzdENsaWVudE1ldGFkYXRhUGFyYW0gPVxuXHRFbnVtUmVzdENsaWVudE1ldGFkYXRhLlBBUkFNX1BBVEhcblx0fCBFbnVtUmVzdENsaWVudE1ldGFkYXRhLlBBUkFNX1FVRVJZXG5cdHwgRW51bVJlc3RDbGllbnRNZXRhZGF0YS5QQVJBTV9EQVRBXG5cdHwgRW51bVJlc3RDbGllbnRNZXRhZGF0YS5QQVJBTV9CT0RZXG5cdHwgRW51bVJlc3RDbGllbnRNZXRhZGF0YS5QQVJBTV9IRUFERVJcblx0O1xuXG5mdW5jdGlvbiBfcGFyYW1CdWlsZGVyKHBhcmFtTmFtZTogRXhjbHVkZTxJRW51bVJlc3RDbGllbnRNZXRhZGF0YVBhcmFtLCBFbnVtUmVzdENsaWVudE1ldGFkYXRhLlBBUkFNX0JPRFk+KVxue1xuXHRyZXR1cm4gZnVuY3Rpb24gPEsgZXh0ZW5kcyBzdHJpbmcgPSBzdHJpbmcsIFYgPSBhbnk+KGtleTogSywgZGVmYXVsdFZhbHVlPzogVik6IElQYXJhbWV0ZXJEZWNvcmF0b3Jcblx0e1xuXHRcdHJldHVybiBmdW5jdGlvbiAodGFyZ2V0OiBvYmplY3QsIHByb3BlcnR5S2V5OiBJUHJvcGVydHlLZXksIHBhcmFtZXRlckluZGV4OiBudW1iZXIpXG5cdFx0e1xuXHRcdFx0Y29uc3QgcGFyYW1PYmo6IElQYXJhbWV0ZXI8SywgVj4gPSB7XG5cdFx0XHRcdGtleSxcblx0XHRcdFx0cGFyYW1ldGVySW5kZXgsXG5cdFx0XHRcdGRlZmF1bHRWYWx1ZSxcblx0XHRcdH07XG5cblx0XHRcdGNvbnN0IGFycjogSVBhcmFtZXRlcltdID0gZ2V0TWVtYmVyTWV0YWRhdGEocGFyYW1OYW1lLCB0YXJnZXQsIHByb3BlcnR5S2V5KSB8fCBbXTtcblxuXHRcdFx0YXJyLnB1c2gocGFyYW1PYmopO1xuXG5cdFx0XHRzZXRNZW1iZXJNZXRhZGF0YShwYXJhbU5hbWUsIGFyciwgdGFyZ2V0LCBwcm9wZXJ0eUtleSk7XG5cdFx0fTtcblx0fTtcbn1cblxuZXhwb3J0IGZ1bmN0aW9uIFBhcmFtQm9keTxWID0gYW55PihkZWZhdWx0VmFsdWU/OiBWKVxue1xuXHRyZXR1cm4gZnVuY3Rpb24gKHRhcmdldDogb2JqZWN0LCBwcm9wZXJ0eUtleTogSVByb3BlcnR5S2V5LCBwYXJhbWV0ZXJJbmRleDogbnVtYmVyKVxuXHR7XG5cdFx0Y29uc3QgcGFyYW1PYmo6IElQYXJhbWV0ZXI8RW51bVJlc3RDbGllbnRNZXRhZGF0YS5QQVJBTV9CT0RZLCBWPiA9IHtcblx0XHRcdGtleTogRW51bVJlc3RDbGllbnRNZXRhZGF0YS5QQVJBTV9CT0RZLFxuXHRcdFx0cGFyYW1ldGVySW5kZXgsXG5cdFx0XHRkZWZhdWx0VmFsdWUsXG5cdFx0fTtcblxuXHRcdHNldE1lbWJlck1ldGFkYXRhKEVudW1SZXN0Q2xpZW50TWV0YWRhdGEuUEFSQU1fQk9EWSwgcGFyYW1PYmosIHRhcmdldCwgcHJvcGVydHlLZXkpO1xuXHR9O1xufVxuXG5leHBvcnQgY29uc3QgUGFyYW1QYXRoID0gX3BhcmFtQnVpbGRlcihFbnVtUmVzdENsaWVudE1ldGFkYXRhLlBBUkFNX1BBVEgpO1xuXG5leHBvcnQgY29uc3QgUGFyYW1RdWVyeSA9IF9wYXJhbUJ1aWxkZXIoRW51bVJlc3RDbGllbnRNZXRhZGF0YS5QQVJBTV9RVUVSWSk7XG5cbmV4cG9ydCBjb25zdCBQYXJhbURhdGEgPSBfcGFyYW1CdWlsZGVyKEVudW1SZXN0Q2xpZW50TWV0YWRhdGEuUEFSQU1fREFUQSk7XG5cbmV4cG9ydCBjb25zdCBQYXJhbUhlYWRlciA9IF9wYXJhbUJ1aWxkZXIoRW51bVJlc3RDbGllbnRNZXRhZGF0YS5QQVJBTV9IRUFERVIpO1xuXG4vL2V4cG9ydCBjb25zdCBQYXJhbUJvZHkgPSBfcGFyYW1CdWlsZGVyKEVudW1SZXN0Q2xpZW50TWV0YWRhdGEuUEFSQU1fQk9EWSkoJ0JvZHknKTtcblxuZXhwb3J0IGludGVyZmFjZSBJUGFyYW1NZXRhZGF0YVxue1xuXHRbRW51bVJlc3RDbGllbnRNZXRhZGF0YS5QQVJBTV9QQVRIXTogSVBhcmFtZXRlcltdLFxuXHRbRW51bVJlc3RDbGllbnRNZXRhZGF0YS5QQVJBTV9RVUVSWV06IElQYXJhbWV0ZXJbXSxcblx0W0VudW1SZXN0Q2xpZW50TWV0YWRhdGEuUEFSQU1fREFUQV06IElQYXJhbWV0ZXJbXSxcblx0W0VudW1SZXN0Q2xpZW50TWV0YWRhdGEuUEFSQU1fSEVBREVSXTogSVBhcmFtZXRlcltdLFxuXHRbRW51bVJlc3RDbGllbnRNZXRhZGF0YS5QQVJBTV9CT0RZXTogSVBhcmFtZXRlcixcbn1cblxuZXhwb3J0IGZ1bmN0aW9uIGdldFBhcmFtTWV0YWRhdGEodGFyZ2V0OiBvYmplY3QsIHByb3BlcnR5S2V5OiBJUHJvcGVydHlLZXkpOiBJUGFyYW1NZXRhZGF0YVxue1xuXHRyZXR1cm4ge1xuXHRcdFtFbnVtUmVzdENsaWVudE1ldGFkYXRhLlBBUkFNX1BBVEhdOiBnZXRNZW1iZXJNZXRhZGF0YShFbnVtUmVzdENsaWVudE1ldGFkYXRhLlBBUkFNX1BBVEgsIHRhcmdldCwgcHJvcGVydHlLZXkpLFxuXHRcdFtFbnVtUmVzdENsaWVudE1ldGFkYXRhLlBBUkFNX1FVRVJZXTogZ2V0TWVtYmVyTWV0YWRhdGEoRW51bVJlc3RDbGllbnRNZXRhZGF0YS5QQVJBTV9RVUVSWSwgdGFyZ2V0LCBwcm9wZXJ0eUtleSksXG5cdFx0W0VudW1SZXN0Q2xpZW50TWV0YWRhdGEuUEFSQU1fREFUQV06IGdldE1lbWJlck1ldGFkYXRhKEVudW1SZXN0Q2xpZW50TWV0YWRhdGEuUEFSQU1fREFUQSwgdGFyZ2V0LCBwcm9wZXJ0eUtleSksXG5cdFx0W0VudW1SZXN0Q2xpZW50TWV0YWRhdGEuUEFSQU1fSEVBREVSXTogZ2V0TWVtYmVyTWV0YWRhdGEoRW51bVJlc3RDbGllbnRNZXRhZGF0YS5QQVJBTV9IRUFERVIsIHRhcmdldCwgcHJvcGVydHlLZXkpLFxuXHRcdFtFbnVtUmVzdENsaWVudE1ldGFkYXRhLlBBUkFNX0JPRFldOiBnZXRNZW1iZXJNZXRhZGF0YShFbnVtUmVzdENsaWVudE1ldGFkYXRhLlBBUkFNX0JPRFksIHRhcmdldCwgcHJvcGVydHlLZXkpLFxuXHR9O1xufVxuXG5leHBvcnQgZnVuY3Rpb24gSGFuZGxlUGFyYW1NZXRhZGF0YTxUIGV4dGVuZHMgYW55PihmbjogKChpbmZvOiB7XG5cdHRhcmdldDogVCxcblx0cHJvcGVydHlLZXk6IElQcm9wZXJ0eUtleSxcblx0dGhpc0FyZ3Y6IFRoaXNUeXBlPFQ+LFxuXHRhcmd2OiBhbnlbXSxcblx0cGFyYW1NZXRhZGF0YTogSVBhcmFtTWV0YWRhdGEsXG59KSA9PiB7XG5cdHBhcmFtTWV0YWRhdGE6IElQYXJhbU1ldGFkYXRhLFxuXHRhcmd2OiBhbnlbXSxcbn0pKVxue1xuXHRyZXR1cm4gZnVuY3Rpb24gKHRhcmdldDogYW55LCBwcm9wZXJ0eUtleTogSVByb3BlcnR5S2V5LCBkZXNjcmlwdG9yOiBUeXBlZFByb3BlcnR5RGVzY3JpcHRvcjxGdW5jdGlvbj4pXG5cdHtcblx0XHRjb25zdCBvbGRNZXRob2QgPSBkZXNjcmlwdG9yLnZhbHVlO1xuXG5cdFx0ZGVzY3JpcHRvci52YWx1ZSA9IGZ1bmN0aW9uICguLi5hcmd2OiBhbnlbXSlcblx0XHR7XG5cdFx0XHRsZXQgcmV0OiB7XG5cdFx0XHRcdHBhcmFtTWV0YWRhdGE6IElQYXJhbU1ldGFkYXRhLFxuXHRcdFx0XHRhcmd2OiBhbnlbXSxcblx0XHRcdH07XG5cblx0XHRcdGxldCBwYXJhbU1ldGFkYXRhOiBJUGFyYW1NZXRhZGF0YTtcblxuXHRcdFx0cGFyYW1NZXRhZGF0YSA9IF9oYWJkbGVQYXJhbUluZm8oe1xuXHRcdFx0XHQvL3RhcmdldCxcblx0XHRcdFx0Ly9wcm9wZXJ0eUtleSxcblx0XHRcdFx0Ly90aGlzQXJndjogdGhpcyxcblx0XHRcdFx0YXJndixcblx0XHRcdFx0cGFyYW1NZXRhZGF0YTogZ2V0UGFyYW1NZXRhZGF0YSh0aGlzLCBwcm9wZXJ0eUtleSksXG5cdFx0XHR9KTtcblxuXHRcdFx0Ly9jb25zb2xlLmRpcihhcmd2KTtcblxuXHRcdFx0YXJndiA9IF9QYXJhbUluZm9Ub0FyZ3YocGFyYW1NZXRhZGF0YSwgYXJndik7XG5cblx0XHRcdC8vY29uc29sZS5kaXIoYXJndik7XG5cblx0XHRcdHJldCA9IGZuKHtcblx0XHRcdFx0dGFyZ2V0LFxuXHRcdFx0XHRwcm9wZXJ0eUtleSxcblx0XHRcdFx0dGhpc0FyZ3Y6IHRoaXMsXG5cdFx0XHRcdGFyZ3YsXG5cdFx0XHRcdHBhcmFtTWV0YWRhdGEsXG5cdFx0XHR9KTtcblxuXHRcdFx0aWYgKHJldC5wYXJhbU1ldGFkYXRhID09IG51bGwpXG5cdFx0XHR7XG5cdFx0XHRcdHJldC5wYXJhbU1ldGFkYXRhID0gcGFyYW1NZXRhZGF0YTtcblx0XHRcdH1cblxuXHRcdFx0aWYgKHJldC5hcmd2ICE9IG51bGwpXG5cdFx0XHR7XG5cdFx0XHRcdGFyZ3YgPSByZXQuYXJndjtcblx0XHRcdH1cblx0XHRcdGVsc2Vcblx0XHRcdHtcblx0XHRcdFx0cmV0LmFyZ3YgPSBhcmd2O1xuXHRcdFx0fVxuXG5cdFx0XHRyZXR1cm4gb2xkTWV0aG9kLmFwcGx5KHRoaXMsIGFyZ3YpO1xuXHRcdH07XG5cdH07XG59XG5cbmV4cG9ydCBmdW5jdGlvbiBfaGFiZGxlUGFyYW1JbmZvPFQ+KGluZm86IHtcblx0Ly90YXJnZXQ6IFQsXG5cdC8vcHJvcGVydHlLZXk6IElQcm9wZXJ0eUtleSxcblx0Ly90aGlzQXJndjogVGhpc1R5cGU8VD4sXG5cdGFyZ3Y6IGFueVtdLFxuXHRwYXJhbU1ldGFkYXRhOiBJUGFyYW1NZXRhZGF0YSxcbn0pXG57XG5cdGNvbnN0IHsgYXJndiB9ID0gaW5mbztcblx0Y29uc3QgZGF0YSA9IGNsb25lRGVlcChpbmZvLnBhcmFtTWV0YWRhdGEpIGFzIElQYXJhbU1ldGFkYXRhO1xuXG5cdHJldHVybiBPYmplY3Qua2V5cyhkYXRhKVxuXHRcdC5yZWR1Y2UoKHJldDogSVBhcmFtTWV0YWRhdGEsIGtleToga2V5b2YgSVBhcmFtTWV0YWRhdGEpID0+XG5cdFx0e1xuXHRcdFx0aWYgKGRhdGFba2V5XSA9PSBudWxsIHx8IChBcnJheS5pc0FycmF5KGRhdGFba2V5XSkgJiYgIShkYXRhW2tleV0gYXMgSVBhcmFtZXRlcltdKS5sZW5ndGgpKVxuXHRcdFx0e1xuXHRcdFx0XHRyZXR1cm4gcmV0O1xuXHRcdFx0fVxuXG5cdFx0XHRpZiAoa2V5ID09PSBFbnVtUmVzdENsaWVudE1ldGFkYXRhLlBBUkFNX0JPRFkpXG5cdFx0XHR7XG5cdFx0XHRcdGNvbnN0IHJvdyA9IGRhdGFba2V5XTtcblx0XHRcdFx0Y29uc3QgdmFsdWUgPSBhcmd2W3Jvdy5wYXJhbWV0ZXJJbmRleF07XG5cblx0XHRcdFx0cmV0W2tleV0gPSB7XG5cdFx0XHRcdFx0Li4uZGF0YVtrZXldLFxuXHRcdFx0XHRcdHZhbHVlLFxuXHRcdFx0XHR9O1xuXHRcdFx0fVxuXHRcdFx0ZWxzZVxuXHRcdFx0e1xuXHRcdFx0XHRjb25zdCBhcnIgPSBkYXRhW2tleV0gYXMgSVBhcmFtZXRlcltdO1xuXG5cdFx0XHRcdHJldFtrZXldID0gYXJyLm1hcCgocm93KSA9PlxuXHRcdFx0XHR7XG5cblx0XHRcdFx0XHRjb25zdCB2YWx1ZSA9IGFyZ3Zbcm93LnBhcmFtZXRlckluZGV4XTtcblxuXHRcdFx0XHRcdHJldHVybiB7XG5cdFx0XHRcdFx0XHQuLi5yb3csXG5cdFx0XHRcdFx0XHR2YWx1ZSxcblx0XHRcdFx0XHR9IGFzIGFueSBhcyBJUGFyYW1ldGVyO1xuXHRcdFx0XHR9KSBhcyBJUGFyYW1ldGVyW107XG5cdFx0XHR9XG5cblx0XHRcdHJldHVybiByZXQ7XG5cdFx0fSwge30gYXMgSVBhcmFtTWV0YWRhdGEpIGFzIElQYXJhbU1ldGFkYXRhXG5cdFx0O1xufVxuXG5leHBvcnQgZnVuY3Rpb24gX1BhcmFtSW5mb1RvQXJndjxUIGV4dGVuZHMgYW55W10+KGRhdGE6IElQYXJhbU1ldGFkYXRhLCBhcmd2OiBUKVxue1xuXHRyZXR1cm4gT2JqZWN0LmtleXMoZGF0YSlcblx0XHQucmVkdWNlKGZ1bmN0aW9uIChhcmd2LCBrZXk6IGtleW9mIElQYXJhbU1ldGFkYXRhKVxuXHRcdHtcblxuXHRcdFx0bGV0IGFycjogSVBhcmFtZXRlcltdO1xuXG5cdFx0XHRpZiAoa2V5ID09PSBFbnVtUmVzdENsaWVudE1ldGFkYXRhLlBBUkFNX0JPRFkpXG5cdFx0XHR7XG5cdFx0XHRcdGFyciA9IFtkYXRhW2tleV1dO1xuXHRcdFx0fVxuXHRcdFx0ZWxzZVxuXHRcdFx0e1xuXHRcdFx0XHRhcnIgPSBkYXRhW2tleV0gYXMgSVBhcmFtZXRlcltdO1xuXHRcdFx0fVxuXG5cdFx0XHRhcnIuZm9yRWFjaCgocm93KSA9PlxuXHRcdFx0e1xuXHRcdFx0XHRhcmd2W3Jvdy5wYXJhbWV0ZXJJbmRleF0gPSByb3cudmFsdWUgPT0gbnVsbCA/IHJvdy5kZWZhdWx0VmFsdWUgOiByb3cudmFsdWU7XG5cdFx0XHR9KTtcblxuXHRcdFx0cmV0dXJuIGFyZ3Y7XG5cdFx0fSwgYXJndi5zbGljZSgpKVxuXHRcdDtcbn1cbiJdfQ==
"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.transformValue = exports.transformKey = exports._core = exports.LazyURLSearchParams = void 0;
const SymTransform = Symbol('transform');
const SymOptions = Symbol('options');
class LazyURLSearchParams extends URLSearchParams {
    constructor(init, options) {
        if (!options) {
            if (init instanceof LazyURLSearchParams) {
                options = Object.assign({}, init[SymOptions]);
            }
            else {
                options = {};
            }
        }
        if (options.transform == null) {
            options.transform = true;
        }
        super(_core(init, options));
        this[SymOptions] = options;
    }
    [SymTransform](value, options) {
        options = options || this[SymOptions];
        return transformValue(value, options);
    }
    /**
     * all null value will transform to ''
     */
    append(name, value, options) {
        options = options || this[SymOptions];
        if (options.transform) {
            value = this[SymTransform](value, options);
        }
        super.append(name, value);
    }
    /**
     * all null value will transform to ''
     */
    set(name, value, options) {
        options = options || this[SymOptions];
        if (options.transform) {
            value = this[SymTransform](value, options);
        }
        super.set(name, value);
    }
    /**
     * append
     */
    push(...values) {
        values.forEach(([k, v]) => this.append(k, v));
    }
    /**
     * set
     */
    extend(values, options) {
        Object.entries(values).forEach(([k, v]) => this.set(k, v, options));
    }
    clone() {
        return new LazyURLSearchParams(this);
    }
    toString() {
        return super.toString();
    }
}
exports.LazyURLSearchParams = LazyURLSearchParams;
function _core(init, options) {
    options = options || {};
    //console.dir(options);
    if (typeof init != 'string' && options.transform && !(init instanceof URLSearchParams) && init) {
        const { emptyValueToKeyOnly } = options;
        if (!Array.isArray(init)) {
            init = Object.entries(init);
        }
        let arr = init.reduce((arr, [key, value]) => {
            if (value == null || emptyValueToKeyOnly && value === '') {
                arr.push(transformKey(key));
            }
            else {
                let u = new URLSearchParams();
                u.append(key, transformValue(value, options));
                arr.push(u.toString());
            }
            return arr;
        }, []);
        init = arr.join('&');
    }
    else if (init == null) {
        init = void 0;
    }
    //console.dir(init);
    return init;
}
exports._core = _core;
function transformKey(value) {
    return encodeURIComponent(value);
}
exports.transformKey = transformKey;
function transformValue(value, options) {
    if (value == null) {
        if (options && options.allowNull) {
            return value;
        }
        return '';
    }
    else if (typeof value === 'object') {
        return JSON.stringify(value);
    }
    return value.toString();
}
exports.transformValue = transformValue;
exports.default = LazyURLSearchParams;
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiaW5kZXguanMiLCJzb3VyY2VSb290IjoiIiwic291cmNlcyI6WyJpbmRleC50cyJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiOzs7QUFLQSxNQUFNLFlBQVksR0FBRyxNQUFNLENBQUMsV0FBVyxDQUFDLENBQUM7QUFDekMsTUFBTSxVQUFVLEdBQUcsTUFBTSxDQUFDLFNBQVMsQ0FBQyxDQUFDO0FBbUJyQyxNQUFhLG1CQUFvQixTQUFRLGVBQWU7SUFVdkQsWUFBWSxJQUEyQixFQUFFLE9BQWtCO1FBRTFELElBQUksQ0FBQyxPQUFPLEVBQ1o7WUFDQyxJQUFJLElBQUksWUFBWSxtQkFBbUIsRUFDdkM7Z0JBQ0MsT0FBTyxHQUFHLE1BQU0sQ0FBQyxNQUFNLENBQUMsRUFBRSxFQUFFLElBQUksQ0FBQyxVQUFVLENBQUMsQ0FBQyxDQUFDO2FBQzlDO2lCQUVEO2dCQUNDLE9BQU8sR0FBRyxFQUFFLENBQUM7YUFDYjtTQUNEO1FBRUQsSUFBSSxPQUFPLENBQUMsU0FBUyxJQUFJLElBQUksRUFDN0I7WUFDQyxPQUFPLENBQUMsU0FBUyxHQUFHLElBQUksQ0FBQztTQUN6QjtRQUVELEtBQUssQ0FBQyxLQUFLLENBQUMsSUFBSSxFQUFFLE9BQU8sQ0FBQyxDQUFDLENBQUM7UUFFNUIsSUFBSSxDQUFDLFVBQVUsQ0FBQyxHQUFHLE9BQU8sQ0FBQztJQUM1QixDQUFDO0lBN0JELENBQUMsWUFBWSxDQUFDLENBQUMsS0FBVSxFQUFFLE9BQWtCO1FBRTVDLE9BQU8sR0FBRyxPQUFPLElBQUksSUFBSSxDQUFDLFVBQVUsQ0FBQyxDQUFDO1FBRXRDLE9BQU8sY0FBYyxDQUFDLEtBQUssRUFBRSxPQUFPLENBQUMsQ0FBQztJQUN2QyxDQUFDO0lBMEJEOztPQUVHO0lBQ0gsTUFBTSxDQUFDLElBQVksRUFBRSxLQUFtQixFQUFFLE9BQWtCO1FBRTNELE9BQU8sR0FBRyxPQUFPLElBQUksSUFBSSxDQUFDLFVBQVUsQ0FBQyxDQUFDO1FBRXRDLElBQUksT0FBTyxDQUFDLFNBQVMsRUFD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UUFDQyxJQUFJLEdBQUcsS0FBSyxDQUFDLENBQUM7S0FDZDtJQUVELG9CQUFvQjtJQUVwQixPQUFPLElBQUksQ0FBQztBQUNiLENBQUM7QUF6Q0Qsc0JBeUNDO0FBRUQsU0FBZ0IsWUFBWSxDQUFDLEtBQWE7SUFFekMsT0FBTyxrQkFBa0IsQ0FBQyxLQUFLLENBQUMsQ0FBQTtBQUNqQyxDQUFDO0FBSEQsb0NBR0M7QUFFRCxTQUFnQixjQUFjLENBQUMsS0FBVSxFQUFFLE9BQWtCO0lBRTVELElBQUksS0FBSyxJQUFJLElBQUksRUFDakI7UUFDQyxJQUFJLE9BQU8sSUFBSSxPQUFPLENBQUMsU0FBUyxFQUNoQztZQUNDLE9BQU8sS0FBSyxDQUFBO1NBQ1o7UUFFRCxPQUFPLEVBQUUsQ0FBQztLQUNWO1NBQ0ksSUFBSSxPQUFPLEtBQUssS0FBSyxRQUFRLEVBQ2xDO1FBQ0MsT0FBTyxJQUFJLENBQUMsU0FBUyxDQUFDLEtBQUssQ0FBQyxDQUFBO0tBQzVCO0lBRUQsT0FBTyxLQUFLLENBQUMsUUFBUSxFQUFFLENBQUM7QUFDekIsQ0FBQztBQWpCRCx3Q0FpQkM7QUFFRCxrQkFBZSxtQkFBbUIsQ0FBQSIsInNvdXJjZXNDb250ZW50IjpbIi8qKlxuICogQ3JlYXRlZCBieSB1c2VyIG9uIDIwMTkvNi85LlxuICovXG5pbXBvcnQgeyBJVFNBcnJheUxpc3RNYXliZVJlYWRvbmx5LCBJVFNWYWx1ZU9yQXJyYXkgfSBmcm9tICd0cy10eXBlJztcblxuY29uc3QgU3ltVHJhbnNmb3JtID0gU3ltYm9sKCd0cmFuc2Zvcm0nKTtcbmNvbnN0IFN5bU9wdGlvbnMgPSBTeW1ib2woJ29wdGlvbnMnKTtcblxuZXhwb3J0IGludGVyZmFjZSBJT3B0aW9uc1xue1xuXHQvKipcblx0ICogJyZrPSZ2PTEnID0+ICcmayZ2PTEnXG5cdCAqIG9ubHkgd29yayBmb3IgY3JlYXRlIG5ld1xuXHQgKi9cblx0ZW1wdHlWYWx1ZVRvS2V5T25seT86IGJvb2xlYW4sXG5cdC8qKlxuXHQgKiB0cmFuc2Zvcm0gdmFsdWUgdG8geC13d3ctZm9ybS11cmxlbmNvZGVkXG5cdCAqL1xuXHR0cmFuc2Zvcm0/OiBib29sZWFuLFxuXG5cdGFsbG93TnVsbD86IGJvb2xlYW4sXG59XG5cbmV4cG9ydCB0eXBlIElVUkxTZWFyY2hQYXJhbXNJbml0ID0gYW55W11bXSB8IFthbnksIGFueV1bXSB8IFJlY29yZDxzdHJpbmcsIGFueT4gfCBzdHJpbmcgfCBVUkxTZWFyY2hQYXJhbXM7XG5cbmV4cG9ydCBjbGFzcyBMYXp5VVJMU2VhcmNoUGFyYW1zIGV4dGVuZHMgVVJMU2VhcmNoUGFyYW1zIGltcGxlbWVudHMgVVJMU2VhcmNoUGFyYW1zXG57XG5cdFtTeW1PcHRpb25zXTogSU9wdGlvbnM7XG5cdFtTeW1UcmFuc2Zvcm1dKHZhbHVlOiBhbnksIG9wdGlvbnM/OiBJT3B0aW9ucylcblx0e1xuXHRcdG9wdGlvbnMgPSBvcHRpb25zIHx8IHRoaXNbU3ltT3B0aW9uc107XG5cblx0XHRyZXR1cm4gdHJhbnNmb3JtVmFsdWUodmFsdWUsIG9wdGlvbnMpO1xuXHR9XG5cblx0Y29uc3RydWN0b3IoaW5pdD86IElVUkxTZWFyY2hQYXJhbXNJbml0LCBvcHRpb25zPzogSU9wdGlvbnMpXG5cdHtcblx0XHRpZiAoIW9wdGlvbnMpXG5cdFx0e1xuXHRcdFx0aWYgKGluaXQgaW5zdGFuY2VvZiBMYXp5VVJMU2VhcmNoUGFyYW1zKVxuXHRcdFx0e1xuXHRcdFx0XHRvcHRpb25zID0gT2JqZWN0LmFzc2lnbih7fSwgaW5pdFtTeW1PcHRpb25zXSk7XG5cdFx0XHR9XG5cdFx0XHRlbHNlXG5cdFx0XHR7XG5cdFx0XHRcdG9wdGlvbnMgPSB7fTtcblx0XHRcdH1cblx0XHR9XG5cblx0XHRpZiAob3B0aW9ucy50cmFuc2Zvcm0gPT0gbnVsbClcblx0XHR7XG5cdFx0XHRvcHRpb25zLnRyYW5zZm9ybSA9IHRydWU7XG5cdFx0fVxuXG5cdFx0c3VwZXIoX2NvcmUoaW5pdCwgb3B0aW9ucykpO1xuXG5cdFx0dGhpc1tTeW1PcHRpb25zXSA9IG9wdGlvbnM7XG5cdH1cblxuXHQvKipcblx0ICogYWxsIG51bGwgdmFsdWUgd2lsbCB0cmFuc2Zvcm0gdG8gJydcblx0ICovXG5cdGFwcGVuZChuYW1lOiBzdHJpbmcsIHZhbHVlOiBzdHJpbmcgfCBhbnksIG9wdGlvbnM/OiBJT3B0aW9ucylcblx0e1xuXHRcdG9wdGlvbnMgPSBvcHRpb25zIHx8IHRoaXNbU3ltT3B0aW9uc107XG5cblx0XHRpZiAob3B0aW9ucy50cmFuc2Zvcm0pXG5cdFx0e1xuXHRcdFx0dmFsdWUgPSB0aGlzW1N5bVRyYW5zZm9ybV0odmFsdWUsIG9wdGlvbnMpXG5cdFx0fVxuXG5cdFx0c3VwZXIuYXBwZW5kKG5hbWUsIHZhbHVlIGFzIGFueSlcblx0fVxuXG5cdC8qKlxuXHQgKiBhbGwgbnVsbCB2YWx1ZSB3aWxsIHRyYW5zZm9ybSB0byAnJ1xuXHQgKi9cblx0c2V0KG5hbWU6IHN0cmluZywgdmFsdWU6IHN0cmluZyB8IGFueSwgb3B0aW9ucz86IElPcHRpb25zKVxuXHR7XG5cdFx0b3B0aW9ucyA9IG9wdGlvbnMgfHwgdGhpc1tTeW1PcHRpb25zXTtcblxuXHRcdGlmIChvcHRpb25zLnRyYW5zZm9ybSlcblx0XHR7XG5cdFx0XHR2YWx1ZSA9IHRoaXNbU3ltVHJhbnNmb3JtXSh2YWx1ZSwgb3B0aW9ucylcblx0XHR9XG5cblx0XHRzdXBlci5zZXQobmFtZSwgdmFsdWUgYXMgYW55KVxuXHR9XG5cblx0LyoqXG5cdCAqIGFwcGVuZFxuXHQgKi9cblx0cHVzaCguLi52YWx1ZXM6IElUU0FycmF5TGlzdE1heWJlUmVhZG9ubHk8dW5rbm93bj5bXSlcblx0e1xuXHRcdHZhbHVlcy5mb3JFYWNoKChbaywgdl0pID0+IHRoaXMuYXBwZW5kKGsgYXMgc3RyaW5nLCB2KSk7XG5cdH1cblxuXHQvKipcblx0ICogc2V0XG5cdCAqL1xuXHRleHRlbmQodmFsdWVzOiBSZWNvcmQ8YW55LCBhbnk+LCBvcHRpb25zPzogSU9wdGlvbnMpXG5cdHtcblx0XHRPYmplY3QuZW50cmllcyh2YWx1ZXMpLmZvckVhY2goKFtrLCB2XSkgPT4gdGhpcy5zZXQoayBhcyBzdHJpbmcsIHYsIG9wdGlvbnMpKTtcblx0fVxuXG5cdGNsb25lPFQgZXh0ZW5kcyBVUkxTZWFyY2hQYXJhbXMgPSBMYXp5VVJMU2VhcmNoUGFyYW1zPigpOiBUXG5cdHtcblx0XHRyZXR1cm4gbmV3IExhenlVUkxTZWFyY2hQYXJhbXModGhpcykgYXMgYW55XG5cdH1cblxuXHR0b1N0cmluZygpXG5cdHtcblx0XHRyZXR1cm4gc3VwZXIudG9TdHJpbmcoKTtcblx0fVxuXG59XG5cbmV4cG9ydCBmdW5jdGlvbiBfY29yZShpbml0PzogSVVSTFNlYXJjaFBhcmFtc0luaXQsIG9wdGlvbnM/OiBJT3B0aW9ucylcbntcblx0b3B0aW9ucyA9IG9wdGlvbnMgfHwge307XG5cblx0Ly9jb25zb2xlLmRpcihvcHRpb25zKTtcblxuXHRpZiAodHlwZW9mIGluaXQgIT0gJ3N0cmluZycgJiYgb3B0aW9ucy50cmFuc2Zvcm0gJiYgIShpbml0IGluc3RhbmNlb2YgVVJMU2VhcmNoUGFyYW1zKSAmJiBpbml0KVxuXHR7XG5cdFx0Y29uc3QgeyBlbXB0eVZhbHVlVG9LZXlPbmx5IH0gPSBvcHRpb25zO1xuXG5cdFx0aWYgKCFBcnJheS5pc0FycmF5KGluaXQpKVxuXHRcdHtcblx0XHRcdGluaXQgPSBPYmplY3QuZW50cmllcyhpbml0KVxuXHRcdH1cblxuXHRcdGxldCBhcnIgPSAoaW5pdCBhcyBbc3RyaW5nLCB1bmtub3duXVtdKS5yZWR1Y2UoKGFyciwgW2tleSwgdmFsdWVdKSA9PiB7XG5cblx0XHRcdGlmICh2YWx1ZSA9PSBudWxsIHx8IGVtcHR5VmFsdWVUb0tleU9ubHkgJiYgdmFsdWUgPT09ICcnKVxuXHRcdFx0e1xuXHRcdFx0XHRhcnIucHVzaCh0cmFuc2Zvcm1LZXkoa2V5KSk7XG5cdFx0XHR9XG5cdFx0XHRlbHNlXG5cdFx0XHR7XG5cdFx0XHRcdGxldCB1ID0gbmV3IFVSTFNlYXJjaFBhcmFtcygpO1xuXHRcdFx0XHR1LmFwcGVuZChrZXksIHRyYW5zZm9ybVZhbHVlKHZhbHVlLCBvcHRpb25zKSk7XG5cdFx0XHRcdGFyci5wdXNoKHUudG9TdHJpbmcoKSk7XG5cdFx0XHR9XG5cblx0XHRcdHJldHVybiBhcnI7XG5cdFx0fSwgW10gYXMgc3RyaW5nW10pXG5cblx0XHRpbml0ID0gYXJyLmpvaW4oJyYnKTtcblx0fVxuXHRlbHNlIGlmIChpbml0ID09IG51bGwpXG5cdHtcblx0XHRpbml0ID0gdm9pZCAwO1xuXHR9XG5cblx0Ly9jb25zb2xlLmRpcihpbml0KTtcblxuXHRyZXR1cm4gaW5pdDtcbn1cblxuZXhwb3J0IGZ1bmN0aW9uIHRyYW5zZm9ybUtleSh2YWx1ZTogc3RyaW5nKVxue1xuXHRyZXR1cm4gZW5jb2RlVVJJQ29tcG9uZW50KHZhbHVlKVxufVxuXG5leHBvcnQgZnVuY3Rpb24gdHJhbnNmb3JtVmFsdWUodmFsdWU6IGFueSwgb3B0aW9ucz86IElPcHRpb25zKVxue1xuXHRpZiAodmFsdWUgPT0gbnVsbClcblx0e1xuXHRcdGlmIChvcHRpb25zICYmIG9wdGlvbnMuYWxsb3dOdWxsKVxuXHRcdHtcblx0XHRcdHJldHVybiB2YWx1ZVxuXHRcdH1cblxuXHRcdHJldHVybiAnJztcblx0fVxuXHRlbHNlIGlmICh0eXBlb2YgdmFsdWUgPT09ICdvYmplY3QnKVxuXHR7XG5cdFx0cmV0dXJuIEpTT04uc3RyaW5naWZ5KHZhbHVlKVxuXHR9XG5cblx0cmV0dXJuIHZhbHVlLnRvU3RyaW5nKCk7XG59XG5cbmV4cG9ydCBkZWZhdWx0IExhenlVUkxTZWFyY2hQYXJhbXNcbiJdfQ==